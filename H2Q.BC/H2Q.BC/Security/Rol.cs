///////////////////////////////////////////////////////////
//  Rol.cs
//  Implementation of the Class Rol
//  Generated by Enterprise Architect
//  Created on:      18-dic-2015 16:13:02
//  Original author: m_figueroa
///////////////////////////////////////////////////////////




using System;
using System.Collections;
using System.Data.SqlClient;
using H2Q.BC.Base;
/// <summary>
/// Esta clase representa un Rol dentro del sistema. Los usuarios pueden tener uno
/// o varios Roles definidos del sistema y a su vez un Rol puede tener acceso a
/// ciertas funciones del sistema.
/// </summary>

using H2Q.BC.DataAccess;
using H2Q.BC.Security;
using H2Q.BC.Security;

[Serializable]
public class Rol : Singular
{

    /// <summary>
    /// Nombre del Rol
    /// </summary>
    public string NombreRol;
    /// <summary>
    /// Descripción del Rol
    /// </summary>
    public string DescripcionRol;
    /// <summary>
    /// Indica si el elemento está activo
    /// </summary>
    public bool Activo;
    //public Acceso m_Acceso;
    //public SecAccion m_SecAccion;

    public Rol(Usuario User)
    {
        this.User = User;
    }

    /// <summary>
    /// Método que lee todos los Roles de la BD, tanto activos como no activos
    /// </summary>
    public void ReadAll()
    {
        DALCSQLServer DALC = this.GetCommonDalc();
        ArrayList parametros = new ArrayList();
        this.Datos = DALC.ExecuteStoredProcedure("READ_ALL_ROLES", parametros);
    }

    /// <summary>
    /// Método responsable de insertar un Rol en la base de datos.
    /// </summary>
    public double Create()
    {
        double ID = 0;
        DALCSQLServer DALC = GetCommonDalc();
        ArrayList parametros = new ArrayList();
        SqlParameter param = new SqlParameter("@NombreRol", this.DREntity["NombreRol"].ToString());
        parametros.Add(param);
        param = new SqlParameter("@DescripcionRol", this.DREntity["DescripcionRol"]);
        parametros.Add(param);
        param = new SqlParameter("@IdUserCreate", this.User.Id);
        parametros.Add(param);
        param = new SqlParameter("@FechaCreate", DateTime.Now);
        parametros.Add(param);
        ID = DALC.ExecuteSQLScalar("INS_ROL", parametros);
        return ID;
    }

    /// <summary>
    /// Método que lee un registro de Rol
    /// </summary>
    public void Read()
    {

    }

    /// <summary>
    /// Método que actualiza el Rol en base de datos.
    /// </summary>
    public void Update()
    {
        DALCSQLServer commonDalc = this.GetCommonDalc();
        ArrayList Parameters = new ArrayList();
        SqlParameter sqlParameter1 = new SqlParameter("@Id", this.DREntity["Id"].ToString());
        Parameters.Add(sqlParameter1);
        SqlParameter sqlParameter2 = new SqlParameter("@NombreRol", this.DREntity["NombreRol"].ToString());
        Parameters.Add(sqlParameter2);
        SqlParameter sqlParameter3 = new SqlParameter("@DescripcionRol", this.DREntity["DescripcionRol"]);
        Parameters.Add(sqlParameter3);
        SqlParameter sqlParameter4 = new SqlParameter("@IdUserUpdate", this.User.Id);
        Parameters.Add(sqlParameter4);
        SqlParameter sqlParameter5 = new SqlParameter("@FechaUpdate", DateTime.Now);
        Parameters.Add(sqlParameter5);
        commonDalc.ExecuteNonQuery("UPD_ROL", ref Parameters);
    }

    /// <summary>
    /// Método responsable de marcar como Activo = false el Rol
    /// </summary>
    public void Delete()
    {

    }

    /// <summary>
    /// Este método es responsable de leer y generar una tabla con los Roles como
    /// columnas y las Acciones como filas. Luego también en las celdas se identifica
    /// si está o no relacionado el par.
    /// </summary>
    public void ReadCartesianoRolesAcciones()
    {
        DALCSQLServer DALC = this.GetCommonDalc();
        ArrayList parametros = new ArrayList();
        this.Datos = DALC.ExecuteStoredProcedure("READ_ALL_RELA_ROL_SECACCION", parametros);
    }

    /// <summary>
    /// Este método es responsable de leer y generar una tabla con los Roles como
    /// columnas y las Personas como filas. Luego también en las celdas se
    /// identifica si está o no relacionado el par.
    /// </summary>
    public void ReadCartesianoRolesPersonas()
    {
        DALCSQLServer DALC = this.GetCommonDalc();
        ArrayList parametros = new ArrayList();
        this.Datos = DALC.ExecuteStoredProcedure("READ_ALL_RELA_ROL_PERSONA", parametros);
    }


}//end Rol